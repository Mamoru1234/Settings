#!/usr/bin/env bash

PROJECT_PATH="$HOME/projects/riot"
NODE_IMAGE_NAME='riotdocker.predixionsoftware.com:5000/riot-one';

#using SIGNTERM instead of kill
function saveRemoveContainer() {
    docker stop $1;
    docker rm $1;
}

function removeImageByFilter() {
    docker images | grep "$1" | awk -F $' ' '{print $3;}' | xargs -r docker rmi
}
function findImageId () {
    docker images | grep "$1" | awk -F $' ' '{print $3;}';
}

#    setup cassandra and kafka
function setup () {
#    removes existing containers related to cassandra
#    removeImageByFilter "riotdocker.predixionsoftware.com:5000/cassandra";
#    removeImageByFilter "cassandra";
    saveRemoveContainer "kafka";
    docker run -d --name=kafka --net=host -e LEADER_REBALANCE_CHECK_INTERVAL=1 nginate/kafka-docker-bundle:0.10;
#   build cassandra image
#    cd $PROJECT_PATH;
#    ./gradlew ':docker:cassandra:buildDockerImage'
    saveRemoveContainer "cassandra";
    IMAGE_ID=$(findImageId 'riotdocker.predixionsoftware.com:5000/cassandra');
    docker run -d --name=cassandra --net=host $IMAGE_ID
}
# updates docker images
function update () {
    removeImageByFilter "riotdocker.predixionsoftware.com:5000/riot-one"
    cd $PROJECT_PATH
    ./gradlew ':riot-one:riot-one-server:buildDockerImage'
}

function runNode() {
    IMAGE_ID=$(findImageId "$NODE_IMAGE_NAME");
    NODE_ID=$(docker create -p "$1:8080" $IMAGE_ID);
    docker start "$NODE_ID"
    docker attach "$NODE_ID"
    docker rm "$NODE_ID"
}

case "$1" in
    "setup") setup;;
    "upd") update;;
    "run") runNode $2;;
    *)echo "Unknown command";;
esac
