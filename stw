#!/usr/bin/env python

import yaml
import os
import socket
import subprocess
import json
import argparse
import uuid
import shutil
from distutils import dir_util
import sys
from tempfile import mkdtemp

HOME = os.environ['HOME']

#####                 User related properties
PROJECT_PATH = HOME + '/projects/riot'
DEFAULT_ATOM_SETTINGS_FILE = HOME + '/temp/config/settings.json'
ATOM_IMAGE_VERSION = '2.0.0-rc.5'
################################################

#####                 Configuration
DEST_DIR = HOME + '/.stw_tmp'
COMPOSE_PATH = DEST_DIR + '/compose.yml'
COPY_FOLDERS = [
    '/postgres-scripts',
    '/mosquitto',
    '/keycloak'
]
CLOUD_NETWORK_NAME = 'riotcloud_riotcloudenv'
ATOM_IMAGE = 'registry.greenwavereality.com/axon/riot-atom:' + ATOM_IMAGE_VERSION
################################################

def project_call(command):
    print '#########################'
    print command
    print '#########################'
    return subprocess.call(command, shell = True, cwd = PROJECT_PATH)

COMPOSE_TEMPLATE = 'docker-compose -f ' + COMPOSE_PATH + ' -p riot-cloud {}'

def compose_command(command):
    st = COMPOSE_TEMPLATE.format(command)
    print st
    return subprocess.call(st, shell = True)

def index_of_first(lst, pred):
    for i,v in enumerate(lst):
        if pred(v):
            return i
    return None

def get_machine_ip():
    return [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]

BUILD_PATH_TEMPLATE = PROJECT_PATH + "/riot-cloud/build/docker-compose{}"

def get_config():
    config_path = ''
    if sys.platform == 'linux2':
        config_path = BUILD_PATH_TEMPLATE.format('/riot-cloud.yml')
    elif sys.platform == 'darwin':
        config_path = BUILD_PATH_TEMPLATE.format('riot-cloud-mac.yml')
    else:
        print 'Unknown platform'
        exit()
    if (not os.path.exists(config_path)):
        print 'Couldn\'t get docker-compose config'
        exit()
    return yaml.load(file(config_path, 'r'))

def clone_folders():
    for folder_prefix in COPY_FOLDERS:
        origin_folder = BUILD_PATH_TEMPLATE.format(folder_prefix)
        if not os.path.exists(origin_folder):
            print 'Couldn\'t get' + folder_prefix + ' folder'
            exit();
        dest_path = DEST_DIR + folder_prefix
        if os.path.exists(dest_path):
            shutil.rmtree(dest_path)
        shutil.copytree(origin_folder, dest_path)

key_lambda = lambda x: 'KEYCLOAK_AUTH-SERVER-URL' in x

def set_key_url(config):
    environment = config['services']['cloud']['environment']
    key_ind = index_of_first(environment, key_lambda)
    environment[key_ind] = environment[key_ind].replace('localhost', get_machine_ip())

def prepare_cloud():
    if not os.path.exists(DEST_DIR):
        print 'Creating folder for processed files ', DEST_DIR
        dir_util.mkpath(DEST_DIR)
    project_call('./gradlew clean --no-daemon')
    project_call('./gradlew :riot-cloud:prepareCloudDockerFiles --no-daemon')
    project_call('./gradlew buildDockerImage --no-daemon')
    os.system('docker pull ' + ATOM_IMAGE)
    config = get_config()
    clone_folders()
    set_key_url(config)
    with file(COMPOSE_PATH, 'w') as compose:
        yaml.dump(config, compose, default_flow_style = False)

def create_settings_file(settings_folder_path, atom_settings_path):
    with open(atom_settings_path) as settings_file:
        settings = json.load(settings_file)
        if not settings.has_key('nodeId'):
            settings['nodeId'] = str(uuid.uuid4())
        if not settings['device'].has_key('deviceId'):
            settings['device']['deviceId'] = str(uuid.uuid4())
        with open(os.path.join(settings_folder_path, 'settings.json'), 'w') as output_settings_file:
            json.dump(settings, output_settings_file)

RUN_ATOM_TEMPLATE="docker run --rm --network={} -v {}:/usr/local/riot-atom/etc/riot-atom {} -d"

def run_atom(atom_settings_path):
    if not os.path.exists(atom_settings_path):
        print 'Couldn\'t find settings file: ' + atom_settings_path
        exit()

    settings_folder_path = mkdtemp(prefix = 'riot-')
    create_settings_file(settings_folder_path, atom_settings_path)
    command = RUN_ATOM_TEMPLATE.format(
        CLOUD_NETWORK_NAME,
        settings_folder_path,
        ATOM_IMAGE
    )

    os.system(command)
    shutil.rmtree(settings_folder_path)

def start_cloud():
    compose_command('up -d')

def remove_cloud():
    compose_command('down -v')

def pull_cloud():
    compose_command('pull')

parser = argparse.ArgumentParser()
parser.add_argument(
    '--start',
    action = 'store_true',
    help = 'For starting cloud at the begining of day. combination of remove, prepare, up',
    default = False
)
parser.add_argument(
    '--up',
    help = 'Up cloud env, ensure that at least one prepare was before',
    action = 'store_true',
    default = False
)
parser.add_argument(
    '--build',
    help = 'Build new images from sources',
    action = 'store_true',
    default = False
)
parser.add_argument(
    '--ui',
    help = 'Runs command using npm run from UI directory',
)
parser.add_argument(
    '--down',
    help = 'Remove cloud containers',
    action = 'store_true',
    default = False
)
parser.add_argument(
    '--pull',
    action = 'store_true',
    help = 'Pull images from registry',
    default = False
)

parser.add_argument(
    '--atom',
    help = 'Run RIOT Atom',
    nargs = '?',
    const = DEFAULT_ATOM_SETTINGS_FILE
)

parser.add_argument(
    '--clean',
    action = 'store_true',
    help = 'Clean your machine folders including images and temp folder',
    default = False
)

if (not os.path.exists(PROJECT_PATH)):
    print 'Couldn\'t find project in ' + PROJECT_PATH
    exit()

args = parser.parse_args()

try:
    if (args.up):
        start_cloud()
    elif (args.start):
        remove_cloud()
        prepare_cloud()
        start_cloud()
    elif (args.down):
        remove_cloud()
    elif (args.build):
        prepare_cloud()
    elif (args.pull):
        pull_cloud()
    elif (args.atom):
        run_atom(args.atom)
    elif (args.clean):
        remove_cloud()
        if os.path.exists(DEST_DIR):
            shutil.rmtree(DEST_DIR)
    elif (not args.ui == None):
        command = 'npm run ' + args.ui
        print command
        subprocess.call(command, shell = True, cwd = PROJECT_PATH + '/riot-ui')
except KeyboardInterrupt:
    pass
