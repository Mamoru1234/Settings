#!/usr/bin/env python

import yaml
import os
import socket
import subprocess
import argparse
import shutil

PROJECT_PATH = os.environ['HOME'] + '/projects/riot'
DEST_DIR = '/temp'
COMPOSE_PATH = os.environ['HOME'] + DEST_DIR + '/compose.yml'
PS_PATH = os.environ['HOME'] + DEST_DIR + '/postgres-scripts'

def project_call(command):
    return subprocess.call(command, shell = True, cwd = PROJECT_PATH)

def compose_command(command):
    st = 'docker-compose -f ' + COMPOSE_PATH + ' -p riot-cloud ' + command
    print st
    return subprocess.call(st, shell = True)

def index_of_first(lst, pred):
    for i,v in enumerate(lst):
        if pred(v):
            return i
    return None

def get_machine_ip():
    return [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]

def get_config():
    return yaml.load(file(PROJECT_PATH + '/riot-cloud/build/docker-compose/riot-cloud.yml', 'r'))

key_lambda = lambda x: 'KEYCLOAK_AUTH-SERVER-URL' in x

def set_key_url(config):
    environment = config['services']['cloud']['environment']
    key_ind = index_of_first(environment, key_lambda)
    environment[key_ind] = environment[key_ind].replace('localhost', get_machine_ip())

def prepare():
    project_call('./gradlew :riot-cloud:prepareCloudDockerFiles')
    config = get_config()
    if os.path.exists(PS_PATH):
        shutil.rmtree(PS_PATH)
    shutil.copytree(PROJECT_PATH + '/riot-cloud/build/docker-compose/postgres-scripts', PS_PATH)
    set_key_url(config)
    # del config['services']['cloud']['network_mode']
    with file(COMPOSE_PATH, 'w') as compose:
        yaml.dump(config, compose, default_flow_style = False)

def start_cloud():
    compose_command('up -d')

def remove_cloud():
    compose_command('down -v')

def pull_cloud():
    compose_command('pull')

parser = argparse.ArgumentParser()
parser.add_argument('--start', action = 'store_true', default = False)
parser.add_argument('--prepare', action = 'store_true', default = False)
parser.add_argument('--remove', action = 'store_true', default = False)
parser.add_argument('--pull', action = 'store_true', default = False)
args = parser.parse_args()

if (args.start):
    start_cloud()
elif (args.remove):
    remove_cloud()
elif (args.prepare):
    prepare()
elif (args.pull):
    pull_cloud()
