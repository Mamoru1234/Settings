#!/usr/bin/env python

import yaml
import os
import socket
import subprocess
import argparse
import shutil
from distutils import dir_util

PROJECT_PATH = os.environ['HOME'] + '/projects/riot'
DEST_DIR = os.environ['HOME'] + '/.stw_tmp'
COMPOSE_PATH = DEST_DIR + '/compose.yml'
PS_PATH = DEST_DIR + '/postgres-scripts'

def project_call(command):
    print '#########################'
    print command
    print '#########################'
    return subprocess.call(command, shell = True, cwd = PROJECT_PATH)

def compose_command(command):
    st = 'docker-compose -f ' + COMPOSE_PATH + ' -p riot-cloud ' + command
    print st
    return subprocess.call(st, shell = True)

def index_of_first(lst, pred):
    for i,v in enumerate(lst):
        if pred(v):
            return i
    return None

def get_machine_ip():
    return [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]

def get_config():
    config_path = PROJECT_PATH + '/riot-cloud/build/docker-compose/riot-cloud.yml'
    if (not os.path.exists(config_path)):
        print 'Couldn\'t get docker-compose config'
        exit();
    return yaml.load(file(config_path, 'r'))

def clone_ps_scripts():
    origin_ps_scripts_path = PROJECT_PATH + '/riot-cloud/build/docker-compose/postgres-scripts'
    if not os.path.exists(origin_ps_scripts_path):
        print 'Couldn\'t get postgres-scripts folder'
        exit();
    if os.path.exists(PS_PATH):
        shutil.rmtree(PS_PATH)
    shutil.copytree(origin_ps_scripts_path, PS_PATH)

key_lambda = lambda x: 'KEYCLOAK_AUTH-SERVER-URL' in x

def set_key_url(config):
    environment = config['services']['cloud']['environment']
    key_ind = index_of_first(environment, key_lambda)
    environment[key_ind] = environment[key_ind].replace('localhost', get_machine_ip())

def prepare_cloud():
    if not os.path.exists(DEST_DIR):
        print 'Creating folder for processed files ', DEST_DIR
        dir_util.mkpath(DEST_DIR)
    project_call('./gradlew clean --no-daemon')
    project_call('./gradlew :riot-cloud:prepareCloudDockerFiles --no-daemon')
    project_call('./gradlew :docker:riot-postgres-9.6:buildDockerImage --no-daemon')
    project_call('./gradlew :docker:riot-cassandra:buildDockerImage --no-daemon')
    project_call('./gradlew :riot-edge-node-application:buildDockerImage -PforceDockerBuildImages --no-daemon')
    project_call('./gradlew :riot-cloud:buildDockerImage -PforceDockerBuildImages --no-daemon')
    config = get_config()
    clone_ps_scripts()
    set_key_url(config)
    with file(COMPOSE_PATH, 'w') as compose:
        yaml.dump(config, compose, default_flow_style = False)

def start_cloud():
    compose_command('up -d')

def remove_cloud():
    compose_command('down -v')

def pull_cloud():
    compose_command('pull')

parser = argparse.ArgumentParser()
parser.add_argument(
    '--start',
    action = 'store_true',
    help = 'For starting cloud at the begining of day. combination of remove, prepare, up',
    default = False
)
parser.add_argument(
    '--up',
    help = 'Up cloud env, ensure that at least one prepare was before',
    action = 'store_true',
    default = False
)
parser.add_argument(
    '--build',
    help = 'Build new images from sources',
    action = 'store_true',
    default = False
)
parser.add_argument(
    '--ui',
    help = 'Runs command using npm run from UI directory',
    action = 'store'
)
parser.add_argument(
    '--down',
    help = 'Remove cloud containers',
    action = 'store_true',
    default = False
)
parser.add_argument(
    '--pull',
    action = 'store_true',
    help = 'Pull images from registry',
    default = False
)

parser.add_argument(
    '--clean',
    action = 'store_true',
    help = 'Clean your machine folders including images and temp folder',
    default = False
)

if (not os.path.exists(PROJECT_PATH)):
    print 'Couldn\'t find project in ' + PROJECT_PATH
    exit()

args = parser.parse_args()

try:
    if (args.up):
        start_cloud()
    elif (args.start):
        remove_cloud()
        prepare_cloud()
        start_cloud()
    elif (args.down):
        remove_cloud()
    elif (args.build):
        prepare_cloud()
    elif (args.pull):
        pull_cloud()
    elif (args.clean):
        remove_cloud()
        if os.path.exists(DEST_DIR):
            shutil.rmtree(DEST_DIR)
    elif (not args.ui == None):
        command = 'npm run ' + args.ui
        print command
        subprocess.call(command, shell = True, cwd = PROJECT_PATH + '/riot-ui')
except KeyboardInterrupt:
    pass
